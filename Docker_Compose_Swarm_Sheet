Download the latest version of Docker Compose:
sudo curl -L "https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose

Apply executable permissions:
sudo chmod +x /usr/local/bin/docker-compose

Test Docker Compose:
docker-compose --version

Create a compose service:
docker-compose up -d

List containers created by compose:
docker-compose ps

Stopping a compose service:
docker-compose stop

Starting a compose service:
docker-compose start

Restarting a compose service:
docker-compose restart

Delete a compose service:
docker-compose down

IF we are using a dockerfile and docker-compose file to run the app,the docker-compose file is as below. 
Docker file contains the details on what weather app container should have. In compose file build option shows it is using docker file to build the weather app container, 
context . shows that docker file is in the same directory where docker-compose file is also exists. we are passing arguments to the docker file here.
when there is a change in docker file, run the docker-compose build commnad before docker-compose up so that it will Rebuild the image.

git clone https://github.com/linuxacademy/content-weather-app.git weather-app
cd weather-app

Create a docker-compose.yml file:
vi docker-compose.yml

docker-compose.yml contents:

version: '3'
services:
  weather-app:
    build:
      context: .
      args:
        - VERSION=v2.0
    ports:
      - "8081:3000"
    environment:
      - NODE_ENV=production

Create the compose container:
docker-compose up -d

List compose services:
docker-compose ps

Verify the weather-app is working:
curl http://localhost:8081

Rebuild the image:
docker-compose build

Rebuild the image with no cache:
docker-compose build --no-cache



Docker Swarm 

Initialize the manager:
docker swarm init \
--advertise-addr [PRIVATE_IP of the swarm master]

Add the worker to the cluster:
docker swarm join --token [TOKEN] \
[PRIVATE_IP]:2377

List the nodes in the swarm (cmd on swarm master):
docker node ls


Managing swarm nodes:

Listing nodes:
docker node ls

Inspecting a node:
docker node inspect [NODE_NAME]

Promoting a worker to a manager:
docker node promote [NODE_NAME]

Demoting a manager to a worker:
docker node demote [NODE_NAME]

Removing a node form the swarm (node must be demoted first):
docker node rm -f [NODE_NAME]

Make a node leave the swarm:
docker swarm leave

Getting the join-token:
docker swarm join-token [worker|manager]

Make the node rejoin the swarm:
docker swarm join --token [TOKEN] \
<PRIVATE_IP>:2377


create and manage a service running in Docker Swarm.

Creating a service:
docker service create -d --name [NAME] \
-p [HOST_PORT]:[CONTAINER_PORT] \
--replicas [REPLICAS] \
[IMAGE]

List services:
docker service ls

Inspecting a service:
docker service inspect [NAME]

Get logs for a service:
docker service logs [NAME]

List all tasks of a service:
docker service ps [NAME]

Scale a service up or down:
docker service scale [NAME]=[REPLICAS]

Update a service:
docker service update [OPTIONS] [NAME]

Create nginx_service:
docker service create -d --name nginx_service -p 8080:80 --replicas 2 nginx:latest

List the swarm services:
docker service ls

Inspect nginx_service:
docker service inspect nginx_service

Find the network:
docker network ls --no-trunc | grep [NETOWRK_ID]

View the running tasks for nginx_service:
docker service ps nginx_service

Scale nginx_service to 3 replicas:
docker service scale nginx_service=3


overlay networks and how they are used with a swarm.

Create a overlay network:
docker network create -d overlay [NAME]

Creating a service with an overlay network:
docker service create -d --name [NAME] \
--network [NETWORK] \
-p [HOST_PORT]:[CONTAINER_PORT] \
--replicas [REPLICAS] \
[IMAGE]

Add a service to a network:
docker service update --network-add [NETWORK] [SERVICE]

Remove a service from a network:
docker service update --network-rm [NETWORK] [SERVICE]

Create an encrypted overlay network:
docker network create -d overlay --opt encrypted encrypted_overlay

Inspect encrypted_overlay:
docker network inspect encrypted_overlay

Create a service using my_overlay:
docker service create -d --name nginx_overlay  --network my_overlay -p 8081:80 --replicas 2 nginx:latest

Adding the my_overlay network to nginx_service:
docker service update --network-add my_overlay nginx_service

Removing the ingress network from nginx_service:
docker service update --network-rm my_overlay nginx_service

Remove encrypted_overlay network:
docker network rm encrypted_overlay


