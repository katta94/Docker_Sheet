How docker works architecture view:
CLI use for executing a command. Docker client uses the appropriate API payload. POSTs to the correct API endpoint
Docker deamon receives instructions. Docker deamon calls containerd to start a new container.
Docker daemon uses gRPC (a CRUD style API). containerd creates an OCI bundle from the Docker image.
Tells runc to create a container using the OCI bundle.runc interfaces with the OS kernal to get the constructs needed to create a container
This includes namespaces, cgroups, etc.. Container process starts as a child process.
runc exits once the container starts. Process is complete, and container is running.

Enable and start Docker:
sudo systemctl start docker && sudo systemctl enable docker

sudo systemctl status docker

sudo dockerd --> to toubleshoot and know info about docker-engine 



Add cloud_user to the docker group:
sudo usermod -aG docker cloud_user


docker container commands: 

ls: List containers
docker container ls

run: Run a command in a new container
docker run -d --name busybox -p -v <image_name>

start: Start one or more stopped containers
docker container start <container_id>

stop: Stop one or more running containers
docker container stop <container_id>

exec: Run a command in a running container
docker container exec -it <container_id> /bin/bash
docker container exec -it <container_id> /bin/sh  (some continers don't have bash installed)
    type exit to get out of bash terminal of the container. Container will be still running.
docker container exec -it <container_id> ls 

stats: Display a live stream of container(s) resource usage statistics like cpu, memory usage.
docker container stats <container_id>

top: Display the running processes of a container
docker container stats <container_id> 

logs: Fetch the logs of a container
docker container logs <container_id>

inspect: Display detailed information on one or more containers
docker container inspect <container_id>

port: List port mappings or a specific mapping for the container 
docker container port <container_id>

pause: Pause all processes within one or more containers
docker container pause <container_id>

unpause: Unpause all processes within one or more containers
docker container unpause <container_id> 

prune: Remove all stopped containers
docker container prune

rename: Rename a container
restart: Restart one or more containers
attach: Attach local standard input, output, and error streams to a running container
cp: Copy files/folders between a container and the local filesystem
export: Export a container's filesystem as a tar archive
kill: Kill one or more running containers
update: Update configuration of one or more containers
wait: Block until one or more containers stop, then print their exit codes

Managing Stopped Container. manage stopped containers by starting, deleting, or pruning them.

Remove all stopped containers:
docker container prune

Remove all images without at least one container associated to them
docker image prune -a

The following Deletes or removes images created before 2017-01-04T00:00:00
docker image prune -a --force --filter "until=2017-01-04T00:00:00"

List the IDs of all containers:
docker container ls -a -q

List all stopped containers:
docker container ls -a -f status=exited

List the IDs of stopped containers:
docker container ls -a -q -f status=exited

Get a count of all stopped containers:
docker container ls -a -q -f status=exited | wc -l

Get a listing of our containers named promethus:
docker container ls -a -f status=exited | grep prometheus

Start exited docker containers 
docker start $(docker ps -a -q --filter "status=exited")   or 
docker start  `docker ps -q -l` # restart it in the background
docker attach `docker ps -q -l` # reattach the terminal & stdin


Docker Network commands

ifconfig 
docker network -h
docker network ls
docker network create <network_name>
docker network inspect <network_name>
docker network rm <network_name>
docker network connect <network_name> <container_name(or)id>
docker network disconnect <network_name> <container_name(or)id>

Create a network (bridge type by default) name br02 with a subnet and gateway:
docker network create --subnet 10.1.0.0/24 --gateway 10.1.0.1 br02  

Create a network with an IP range (ip_range is the subset of ip_subnet. ip_subnet can be divided into multiple ip_ranges where each ip_range can be alloted to each docker container):
docker network create --subnet 10.1.0.0/16 --gateway 10.1.0.1 \
--ip-range=10.1.4.0/24 --driver=bridge --label=host4network br04

Inspect the network br04 network:
docker network inspect br04

Create a container with br04 network and ip_address:
docker container run -d --name network-test02 --ip 10.1.4.102 --network br04 nginx /bin/bash

Install Net Tools:
yum update -y
yum install -y net-tools

Get the IP info for the container:
ifconfig

Get the gateway info the container:
netstat -rn

Get the DNS info for the container:
cat /etc/resolv.conf

Networking two containers


Create an internal network:
docker network create -d bridge --internal localhost

Create a MySQL container that is connected to localhost:
docker container run -d --name test_mysql \
-e MYSQL_ROOT_PASSWORD=P4sSw0rd0 \
--network localhost mysql:5.7

Create a container that can ping the MySQL container:
docker container run -it --name ping-mysql \
--network bridge --network localhost \
centos

Create a container that can't ping the MySQL container:
docker container run -it --name cant-ping-mysql \
centos

Create a Nginx container that is not publicly accessible:
docker container run -d --name private-nginx -p 8081:80 --network localhost nginx

Inspect private-nginx:
docker container inspect private-nginx


Docker Volumes

Default Volume Storage locations:
Linux container: /var/lib/docker/volumes/
Windows container: C:\ProgramData\Docker\volumes

List all volumes on a host:
docker volume ls

Create a new volume:
docker volume create test-volume1

Get the flags available when creating a volume:
docker volume create -h

Inspecting a volume:
docker volume inspect test-volume1

Deleting a volume:
docker volume rm test-volume

Removing all unused volumes:
docker volume prune

Using Volumes for Persistent Storage. Volumes are easier to back up or migrate than bind mounts. 
You can manage volumes using Docker CLI commands or the Docker API. They work on both Linux and Windows containers. 
Volumes can be more safely shared among multiple containers. Volume drivers allow for:
Storing volumes on remote hosts or cloud providers
Encrypting the contents of volumes
Add other functionality


Create a new volume for an Nginx container:
docker volume create html-volume

Creating a volume using that volume mount:
docker container run -d \
 --name nginx-volume1 \
 --mount type=volume,source=html-volume,target=/usr/share/nginx/html/ \
 nginx

Inspect the volume:
docker volume inspect html-volume

List the contents of html-volume:
sudo ls /var/lib/docker/volumes/html-volume/_data

Creating a volume using that volume flag:
docker container run -d \
 --name nginx-volume2 \
 -v html-volume:/usr/share/nginx/html/ \
 nginx

Edit index.html:
sudo vi /var/lib/docker/volumes/html-volume/_data/index.html

Inspect nginx-volume2 to get the private IP:
docker container inspect nginx-volume2

Login into nginx-volume1 and go to the html directory:
docker container exec -it nginx-volume1 /bin/bash
cd /usr/share/nginx/html
cat index.hml

Install Vim:
apt-get update -y
apt-get install vim -y

Using a read_only volume:
docker run -d \
  --name=nginx-volume3 \
  --mount source=html-volume,target=/usr/share/nginx/html,readonly \
  nginx


Docker Events

how to listen for events using the events command. Get real-time events from the server:
docker system events
docker system events --since '<TIME_PERIOD>'

Filter for container events:
docker system events --filter type=container --since '1h'

Use multiple filters:
docker system events --filter type=container --filter event=attach --filter event=die --filter event=stop


Managing Docker with Portainer. Install Portainer and use it manage our Docker host.

Create a volume for Portainers data:
docker volume create portainer_data

Create the Portainers container:
docker container run -d --name portainer -p 8080:9000 \
--restart=always \
-v /var/run/docker.sock:/var/run/docker.sock \
-v portainer_data:/data portainer/portainer











